/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable()
export class IncidentsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://";
    }

    /**
     * @param limit (optional) 
     * @param offset (optional) 
     * @return OK
     */
    getAll(limit: number | null | undefined, offset: number | null | undefined): Observable<IncidentListDto> {
        let url_ = this.baseUrl + "/api/incidents?";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
        if (offset !== undefined)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<IncidentListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IncidentListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<IncidentListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IncidentListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("unexpected error", status, _responseText, _headers);
            }));
        }
    }

    /**
     * @return OK
     */
    create(request: IncidentModel): Observable<ObjectId> {
        let url_ = this.baseUrl + "/api/incidents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ObjectId>><any>_observableThrow(e);
                }
            } else
                return <Observable<ObjectId>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ObjectId> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ObjectId.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Invalid Model", status, _responseText, _headers);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("unexpected error", status, _responseText, _headers);
            }));
        }
    }

    /**
     * @return OK
     */
    get(id: string): Observable<IncidentDto> {
        let url_ = this.baseUrl + "/api/incidents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<IncidentDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<IncidentDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<IncidentDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IncidentDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("unexpected error", status, _responseText, _headers);
            }));
        }
    }
}

export class IncidentListDto implements IIncidentListDto {
    total?: number | undefined;
    items?: IncidentListItemDto[] | undefined;

    constructor(data?: IIncidentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.total = data["total"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(IncidentListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IncidentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IIncidentListDto {
    total?: number | undefined;
    items?: IncidentListItemDto[] | undefined;
}

export class IncidentListItemDto implements IIncidentListItemDto {
    /** Incident unique identifier */
    id!: string;
    type?: IncidentTypeDto | undefined;
    /** Modified date */
    modified!: Date;
    /** Created date */
    created!: Date;
    /** Incident reporter name */
    reporter?: string | undefined;

    constructor(data?: IIncidentListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.type = data["type"];
            this.modified = data["modified"] ? new Date(data["modified"].toString()) : <any>undefined;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.reporter = data["reporter"];
        }
    }

    static fromJS(data: any): IncidentListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["reporter"] = this.reporter;
        return data; 
    }
}

export interface IIncidentListItemDto {
    /** Incident unique identifier */
    id: string;
    type?: IncidentTypeDto | undefined;
    /** Modified date */
    modified: Date;
    /** Created date */
    created: Date;
    /** Incident reporter name */
    reporter?: string | undefined;
}

/** Incident Type */
export enum IncidentTypeDto {
    None = "none",
    Malware = "malware",
    Phishing = "phishing",
    SocialEngineering = "socialEngineering",
    Ddos = "ddos",
}

export class IncidentDto implements IIncidentDto {
    /** Incident unique identifier */
    id!: string;
    type?: IncidentTypeDto | undefined;
    /** Detected date */
    detected!: Date;
    /** Created date */
    created!: Date;
    /** Created date */
    modified!: Date;
    /** Incident reporter name */
    reporter?: string | undefined;
    /** Incident description */
    description?: string | undefined;
    tlp?: IncidentTlp | undefined;

    constructor(data?: IIncidentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.type = data["type"];
            this.detected = data["detected"] ? new Date(data["detected"].toString()) : <any>undefined;
            this.created = data["created"] ? new Date(data["created"].toString()) : <any>undefined;
            this.modified = data["modified"] ? new Date(data["modified"].toString()) : <any>undefined;
            this.reporter = data["reporter"];
            this.description = data["description"];
            this.tlp = data["tlp"];
        }
    }

    static fromJS(data: any): IncidentDto {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["detected"] = this.detected ? this.detected.toISOString() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["reporter"] = this.reporter;
        data["description"] = this.description;
        data["tlp"] = this.tlp;
        return data; 
    }
}

export interface IIncidentDto {
    /** Incident unique identifier */
    id: string;
    type?: IncidentTypeDto | undefined;
    /** Detected date */
    detected: Date;
    /** Created date */
    created: Date;
    /** Created date */
    modified: Date;
    /** Incident reporter name */
    reporter?: string | undefined;
    /** Incident description */
    description?: string | undefined;
    tlp?: IncidentTlp | undefined;
}

export class IncidentModel implements IIncidentModel {
    type!: IncidentTypeDto;
    /** Detected date */
    detected!: Date;
    /** Incident reporter name */
    reporter!: string;
    /** Incident description */
    description?: string | undefined;
    tlp!: IncidentTlp;

    constructor(data?: IIncidentModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.detected = data["detected"] ? new Date(data["detected"].toString()) : <any>undefined;
            this.reporter = data["reporter"];
            this.description = data["description"];
            this.tlp = data["tlp"];
        }
    }

    static fromJS(data: any): IncidentModel {
        data = typeof data === 'object' ? data : {};
        let result = new IncidentModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["detected"] = this.detected ? this.detected.toISOString() : <any>undefined;
        data["reporter"] = this.reporter;
        data["description"] = this.description;
        data["tlp"] = this.tlp;
        return data; 
    }
}

export interface IIncidentModel {
    type: IncidentTypeDto;
    /** Detected date */
    detected: Date;
    /** Incident reporter name */
    reporter: string;
    /** Incident description */
    description?: string | undefined;
    tlp: IncidentTlp;
}

/** Object Id */
export class ObjectId implements IObjectId {
    id!: string;

    constructor(data?: IObjectId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ObjectId {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

/** Object Id */
export interface IObjectId {
    id: string;
}

/** Traffic Lights Protocol */
export enum IncidentTlp {
    Red = "red",
    Yellow = "yellow",
    Green = "green",
    White = "white",
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}